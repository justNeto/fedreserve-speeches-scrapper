#!/usr/bin/env python

import os
import re
import time

# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions

from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as ExpectedConditions
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

'''
Selenium wrapper class for simplicity
'''
class SeleniumOptions():

    def __init__(self, browser="Chrome", headless=False, speaker="powell"):

        self._speakers = {
                "powell": 1,
                "jefferson": 2,
                "barr": 3,
                "bowman": 4,
                "cook": 6,
                "kugler": 7,
                "waller": 8,
                "former": 9,
                "other": 10
        }

        self.speaker = speaker
        self.headless = headless
        self.browser = browser
        self.driver = None

        # Instance a selenium options object to return
        try:
            if self.browser == "chrome":
                self.selenium_options = webdriver.ChromeOptions()
                self.driver = webdriver.Chrome()
            elif self.browser == "firefox":
                self.selenium_options = webdriver.FirefoxOptions()
                self.driver = webdriver.Firefox()
            else:
                raise AttributeError(
                    f"wrong browser specified"
                )

            if self.headless is True:
                self.selenium_options.add_argument("--headless")
            elif self.headless is False:
                pass
            else:
                raise Exception("Unexpected error occurred")

            if self.config.window_size:
                self.selenium_options.set_window_size(1872, 1344)

        except:
            pass


    def get_driver(self):
        return self.driver, self._speakers[self.speaker], self.speaker


class TestGetPowellsLinks():

    def __init__(self):
        self.speech_links = list()
        self.nth_child = None
        self.target = None


    def generate_document(self):
        title_element = self.driver.find_element(By.XPATH, "//h3[@class='title']/em")
        title_text = title_element.text
        print(f"::-> Title:\n {title_text}")

        data_div = self.driver.find_element(By.XPATH, "//div[@class='col-xs-12 col-sm-8 col-md-8']")
        paragraphs = data_div.find_elements(By.TAG_NAME, "p")

        # Combine the text of all <p> elements (if there are multiple <p> tags)
        data_text = "\n".join([para.text for para in paragraphs])
        print(f"::-> Data text:\n {data_text}")

        file_name = self.target + title_text
        path = os.path.abspath(os.getcwd()) + "data"

        with open(os.path.join(path, file_name), 'w') as fp:
            # uncomment below line if you want to create an empty file
            fp.write(title_text)
            fp.write("\n")
            fp.write(data_text)


    def select_target(self):
        self.driver.get("https://www.federalreserve.gov/newsevents/speeches.htm")
        seach_string = ".checkbox:nth-child(" + str(self.nth_child) + ") .ng-scope"
        self.driver.find_element(By.CSS_SELECTOR, seach_string).click()
        self.driver.find_element(By.CSS_SELECTOR, ".icon-more").click()


    def extract_speeches_links(self):
        base_string = "^https://www.federalreserve.gov/newsevents/speech/"
        a_elements = self.driver.find_elements(By.XPATH, "//a[@href]")

        if self.target == "former" or self.target == "other":
            speaker_element = self.driver.find_element(By.XPATH, "//p[@class='news__speaker ng-binding']")
            speaker_name = speaker_element.text
            name_parts = speaker_name.split()
            last_name = name_parts[-1]  # should get the last name
            print(f"::-> Last Name found: {last_name}")

            re_match_string = base_string + last_name + ".*$"
        else:
            re_match_string = base_string + self.target + ".*$"

        for element in a_elements:
            if re.match(re_match_string, element.get_attribute("href")):
                self.speech_links.append(element.get_attribute("href"))


    def setup_method(self, options):
        self.driver, self.nth_child, self.target  = options.get_driver()
        self.vars = {}


    def teardown_method(self):
        self.driver.quit()


    def run(self):
        self.select_target()

        # Find the pagination <ul> element
        pagination_ul = self.driver.find_element(By.XPATH, "//ul[@uib-pagination]")

        # Find all the <a> elements inside the pagination <ul> (these represent the page numbers)
        page_links = pagination_ul.find_elements(By.TAG_NAME, "a")

        # Capture the number of pages in the pagination (max size is 4, but you can confirm the number of visible links)
        total_pages = len(page_links) - 2

        # Print out the number of pages for debugging
        print(f"::-> Total Pages: {total_pages}")

        current_page = 1

        while current_page < total_pages:
            try:

                # Scrape data on the current page
                time.sleep(1)

                print(f"::-> Scrapping page {current_page}")
                self.extract_speeches_links()

                next_button = self.driver.find_element(By.XPATH, "//li[contains(@class, 'pagination-next')]//a[text()='Next']")
                next_button.click()
                current_page += 1

            except Exception as e:
                print(f"::!-> Error occurred: {e}")
                break  # Exit the loop if there is an error (e.g., no "Next" button found)

        print(f"::-> Speeches found:\n {self.speech_links}")

        # Excract all data using the list
        for link in self.speech_links:
            generate_document(link)


if __name__ == '__main__':
    speeches = TestGetPowellsLinks()
    options = SeleniumOptions(browser="firefox", headless=True, speaker="powell")
    speeches.setup_method(options)
    speeches.run()
    speeches.teardown_method()
