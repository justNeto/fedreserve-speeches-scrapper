#!/usr/bin/env python

# Use dataclass for readibility
from dataclasses import dataclass

# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions

from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

@dataclass
class BrowserConfig:
    browser: str = "chrome"
    headless: bool = False
    window_size: tuple = (1872, 1344)

'''
Selenium wrapper class for simplicity
'''
class SeleniumOptions():
    def __init__(self, browser="Chrome", headless=False):

        self.headless = headless
        self.browser = browser
        self.driver = None

        # Instance a selenium options object to return
        try:
            if self.browser == "chrome":
                self.selenium_options = webdriver.ChromeOptions()
                self.driver = webdriver.Chrome()
            elif self.browser == "firefox":
                self.selenium_options = webdriver.FirefoxOptions()
                self.driver = webdriver.Firefox()
            else:
                raise AttributeError(
                    f"wrong browser specified"
                )

            if self.headless is True:
                self.selenium_options.add_argument("--headless")
            elif self.headless is False:
                pass
            else:
                raise Exception("Unexpected error occurred")

            if self.config.window_size:
                self.selenium_options.set_window_size(1872, 1344)
        except:
            pass


    def get_driver(self):
        return self.driver


class TestGetPowellsLinks():
  def setup_method(self, options):
    self.driver = options.get_driver()
    self.vars = {}

  def teardown_method(self):
    self.driver.quit()

  def run(self):
    self.driver.get("https://www.federalreserve.gov/newsevents/speeches.htm")
    self.driver.find_element(By.CSS_SELECTOR, ".checkbox:nth-child(1) .ng-scope").click()
    self.driver.find_element(By.CSS_SELECTOR, ".icon-more").click()


if __name__ == '__main__':
    speeches = TestGetPowellsLinks()
    options = SeleniumOptions(browser="firefox", headless=True)
    # options = SeleniumOptions(browser="firefox")

    speeches.setup_method(options)
    speeches.run()
    # speeches.teardown_method()
