#!/usr/bin/env python

import re
import time

# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions

from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

'''
Selenium wrapper class for simplicity
'''
class SeleniumOptions():
    def __init__(self, browser="Chrome", headless=False, speaker="powell"):

        self._speakers = {
                "powell": 1,
                "jefferson": 2
        }

        self.speaker = speaker
        self.headless = headless
        self.browser = browser
        self.driver = None

        # Instance a selenium options object to return
        try:
            if self.browser == "chrome":
                self.selenium_options = webdriver.ChromeOptions()
                self.driver = webdriver.Chrome()
            elif self.browser == "firefox":
                self.selenium_options = webdriver.FirefoxOptions()
                self.driver = webdriver.Firefox()
            else:
                raise AttributeError(
                    f"wrong browser specified"
                )

            if self.headless is True:
                self.selenium_options.add_argument("--headless")
            elif self.headless is False:
                pass
            else:
                raise Exception("Unexpected error occurred")

            if self.config.window_size:
                self.selenium_options.set_window_size(1872, 1344)

        except:
            pass


    def get_driver(self):
        return self.driver, self._speakers[self.speaker]


class TestGetPowellsLinks():

    def __init__(self):
        self.speech_links = list()

    def extract_speeches_links():
        seach_string = ".checkbox:nth-child(" + str(self.speaker) + ") .ng-scope"
        self.driver.find_element(By.CSS_SELECTOR, seach_string).click()
        self.driver.find_element(By.CSS_SELECTOR, ".icon-more").click()
        a_elements = self.driver.find_elements(By.XPATH, "//a[@href]")

        for element in a_elements:
            if re.match('^https://www.federalreserve.gov/newsevents/speech/.*$', element.get_attribute("href")):
                self.speech_links.append(element.get_attribute("href"))

    def setup_method(self, options):
        self.driver, self.speaker  = options.get_driver()
        self.vars = {}

    def teardown_method(self):
        self.driver.quit()

    def run(self):
        self.driver.get("https://www.federalreserve.gov/newsevents/speeches.htm")

        while True:
            try:
                # Scrape data on the current page
                time.sleep(2)

                # Try to find the "Next" button
                next_button = self.driver.find_element(By.XPATH, "//li[@class='pagination-next']//a")

                # Check if the "Next" button is disabled
                if "disabled" in next_button.get_attribute("class"):
                    print("No more pages to scrape.")
                    break  # Exit the loop when "Next" is disabled

                # Click the "Next" button to go to the next page
                next_button.click()

            except Exception as e:
                print(f"Error occurred: {e}")
                break  # Exit the loop if there is an error (e.g., no "Next" button found)

        # seach_string = ".checkbox:nth-child(" + str(self.speaker) + ") .ng-scope"
        # self.driver.find_element(By.CSS_SELECTOR, seach_string).click()
        # self.driver.find_element(By.CSS_SELECTOR, ".icon-more").click()
        #
        # a_elements = self.driver.find_elements(By.XPATH, "//a[@href]")
        # self.speech_links = [element.get_attribute("href") for element in a_elements if re.match('^https://www.federalreserve.gov/newsevents/speech/.*$', element.get_attribute("href"))]

        print(self.speech_links)



if __name__ == '__main__':
    speeches = TestGetPowellsLinks()
    options = SeleniumOptions(browser="firefox", headless=True, speaker="jefferson")
    # options = SeleniumOptions(browser="firefox")
    speeches.setup_method(options)
    speeches.run()
    speeches.teardown_method()
